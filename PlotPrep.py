#!/usr/bin/python3

# I know, I know, this is "bad form" to have several imports on a line
import os,sys,re,glob
import pandas
import numpy
from numpy.polynomial.polynomial import polyfit
from math import floor, ceil

def plotPrep():
    
    # glob summary files
    fileList = glob.glob('YearlySummary*csv')
    holderFile = pandas.DataFrame()
    # append all YearlySummary files
    for fileIn in fileList:
        readFile = pandas.read_csv(fileIn)
        print(fileIn)
        holderFile = pandas.concat([holderFile,readFile],sort=False,\
                                   ignore_index=True)
    newFileCreate(holderFile)

def newFileCreate(holderFile):

    '''
    preprocessing the weather data, then creating plots for each combination
    of independent/dependent variable
    '''
    rainRange = abs(holderFile.aggRain.max()-holderFile.aggRain.min())
    tRange = abs(holderFile.meanAvgT.max()-holderFile.meanAvgT.min())
    holderFile['normRainT'] = (holderFile.aggRain - holderFile.aggRain.min())\
                            /rainRange +\
                            (holderFile.meanAvgT - holderFile.meanAvgT.min())\
                            /tRange

    indepCols = ['meanAvgT', 'aggGDD','meanMaxRH', 'meanMaxVPD', 'meanMinRH', \
                 'aggRain', 'normRainT', 'meanSRWM2']
    depCols = ['moisture', 'kernel_weight', 'actual_wheat_ash', 'falling_no',\
               'protein_12']

    for IC in indepCols:
        for DC in depCols:
            agrFileCreate(holderFile,IC,DC)

def agrFileCreate(holderFile,IC,DC):

    '''
    Create plot files in xmgrace format (.agr)
    This is a simple format plotting file, details here:
    http://plasma-gate.weizmann.ac.il/Grace/
    '''
    
    xRange = abs(holderFile[IC].max() - holderFile[IC].min())
    yRange = abs(holderFile[DC].max() - holderFile[DC].min())

    # fit data to linear and 2nd order polynomial
    linFit,secFit = fitCreate(holderFile,IC,DC)

    print(IC,DC,linFit,secFit)
    xVals = numpy.linspace(holderFile[IC].min()-(xRange/10),\
                           holderFile[IC].max()+(xRange/10),num=100)
    dataDF = dataCreate(linFit,secFit,xVals)
    
    with open('template.agr','r') as templateFile:
        templateLines = templateFile.readlines()

    outFile = open('PlotFiles/'+DC+'_vs_'+IC+'.agr','w')
    for line in templateLines:
        if 'world xlow_XXX' in line:
            line = line.replace('xlow_XXX',str(floor(holderFile[IC].min())))
            line = line.replace('ylow_XXX',str(floor(holderFile[DC].min())))
            line = line.replace('xhigh_XXX',str(ceil(holderFile[IC].max())))
            line = line.replace('yhigh_XXX',str(ceil(holderFile[DC].max())))
        elif 'title "title' in line:
            line = line.replace('titletoreplace_XXX',DC+' vs '+IC)
        elif 'label "xaxislabel' in line:
            line = line.replace('xaxislabel_XXX',IC)
        elif 'label "yaxislabel' in line:
            line = line.replace('yaxislabel_XXX',DC)
        elif 'major xaxisTick_XXX' in line:
            line = line.replace('xaxisTick_XXX',str(xRange/5))
        elif 'major yaxisTick_XXX' in line:
            line = line.replace('yaxisTick_XXX',str(yRange/5))
        elif 'comment "comment' in line:
            line = line.replace('comment_XXX',\
                                'Automatically generated by PlotPrep.py')
        outFile.write(line)
        
    holderFile[[IC,DC]].to_csv(outFile,index=False,header=False,sep=' ')
    outFile.write('&\n')
    outFile.write('@target G0.S1\n@type xy\n')
    dataDF[['x','lD']].to_csv(outFile,index=False,header=False,sep=' ')
    outFile.write('&\n')
    outFile.write('@target G0.S1\n@type xy\n')
    dataDF[['x','sD']].to_csv(outFile,index=False,header=False,sep=' ')    
    outFile.write('&\n')
    outFile.close()

def fitCreate(holderFile,IC,DC):

    # polyfit to find fit for linear and second order polynomial
    lF = polyfit(holderFile[IC],holderFile[DC],1,full=True)
    sF = polyfit(holderFile[IC],holderFile[DC],2,full=True)
    return lF,sF

def dataCreate(lF,sF,xVals):

    # create data from fits
    df = pandas.DataFrame()
    df['x'] = xVals
    df['lD'] = lF[0][1]*df['x'] + lF[0][0]
    df['sD'] = sF[0][2]*(df['x']*df['x']) + sF[0][1]*df['x'] + sF[0][0]
    return df
        
if __name__ == '__main__':
    plotPrep()
